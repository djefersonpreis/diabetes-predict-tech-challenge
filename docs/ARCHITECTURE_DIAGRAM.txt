                    🩺 ARQUITETURA DIABETES ML - CONTAINERIZADA 🐳
    ════════════════════════════════════════════════════════════════════════════════

    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                            🌐 INTERFACES DE USUÁRIO                         │
    ├─────────────────────────────┬───────────────────────────────────────────────┤
    │      📊 DASHBOARD           │           🚀 API FASTAPI                     │
    │   Streamlit (Port 8501)     │         Swagger (Port 8000)                   │
    │                             │                                               │
    │  • Análise Exploratória     │  • /collect-data                              │
    │  • Visualizações            │  • /process-data                              │  
    │  • Interface Predição       │  • /train-model                               │
    │  • Métricas do Modelo       │  • /predict                                   │
    └─────────────────────────────┴───────────────────────────────────────────────┘
                                           │
                                           ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                          🤖 CAMADA DE MACHINE LEARNING                      │
    ├─────────────────────┬─────────────────────┬─────────────────────────────────┤
    │   📥 DATA COLLECTOR │  ⚙️ DATA PROCESSOR   │    🎯 DIABETES MODEL            │
    │                     │                     │                                 │
    │ • Download Kaggle   │ • Limpeza de Dados  │ • Random Forest Classifier      │
    │ • Extract ZIP→CSV   │ • Feature Selection │ • Training & Validation         │
    │ • Validação         │ • Normalização      │ • Predições                     │
    │ • Armazenamento     │ • Outliers          │ • Métricas                      │
    └─────────────────────┴─────────────────────┴─────────────────────────────────┘
                                           │
                                           ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                            🗄️ CAMADA DE DADOS                              │  
    ├─────────────────────┬─────────────────────┬─────────────────────────────────┤
    │    📊 RAW DATA      │  🔧 PROCESSED DATA  │       💾 MODEL STORAGE          │
    │                     │                     │                                 │
    │ • Dataset Original  │ • Dados Limpos      │ • Modelo Treinado (.joblib)     │
    │ • 250k+ Registros   │ • Features Selecion │ • Scaler (.joblib)              │
    │ • 22 Colunas        │ • Dados Normalizad  │ • Feature Names                 │
    │ • Tabela raw_data   │ • Tabela processed  │ • Métricas Performance          │
    └─────────────────────┴─────────────────────┴─────────────────────────────────┘
                                           │
                                           ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                          🐳 CONTAINERIZAÇÃO DOCKER                          │
    ├─────────────────────────────┬───────────────────────────────────────────────┤
    │     🔧 CONTAINER API        │         📊 CONTAINER DASHBOARD                │
    │   diabetes-api:latest       │      diabetes-dashboard:latest                │
    │                             │                                               │
    │ • FastAPI Application       │ • Streamlit Application                       │
    │ • Python 3.9 Runtime       │ • Python 3.9 Runtime                         │ 
    │ • Port Mapping 8000:8000    │ • Port Mapping 8501:8501                     │
    │ • Volume: ./data:/app/data  │ • Volume: ./models:/app/models                │
    └─────────────────────────────┴───────────────────────────────────────────────┘
                                           │
                                           ▼
    ┌─────────────────────────────────────────────────────────────────────────────┐
    │                       🔄 FLUXO DE EXECUÇÃO SEQUENCIAL                       │
    └─────────────────────────────────────────────────────────────────────────────┘

    1️⃣  🐳 docker-compose up -d      →  Iniciar containers
    2️⃣  📥 Coleta de Dados           →  Download dataset Kaggle  
    3️⃣  🔧 Processamento             →  Limpeza e feature engineering
    4️⃣  💾 Armazenamento             →  Salvar em SQLite (raw + processed)
    5️⃣  🤖 Treinamento ML            →  Random Forest + validação
    6️⃣  💾 Persistir Modelo          →  Salvar modelo + métricas
    7️⃣  🚀 API Disponível            →  Endpoints REST funcionais
    8️⃣  📊 Dashboard Ativo           →  Interface visual interativa
    9️⃣  🎯 Predições                 →  Sistema produtivo funcionando

    ════════════════════════════════════════════════════════════════════════════════

                            📋 COMANDOS ESSENCIAIS

    🚀 Iniciar:     docker-compose up -d  ou  make up
    📊 Acessar:     http://localhost:8000/docs (API)
                    http://localhost:8501 (Dashboard)
    📋 Logs:        docker-compose logs -f  ou  make logs
    ⚡ Pipeline:    make pipeline
    ⏹️ Parar:       docker-compose down  ou  make down

    ════════════════════════════════════════════════════════════════════════════════